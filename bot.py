import logging
import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from openai import OpenAI
from dotenv import load_dotenv
from templates_logic import get_reply_from_templates

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥ ‚Äî‚Äî‚Äî
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = 5576028179

if not BOT_TOKEN:
    raise RuntimeError("Environment variable TELEGRAM_TOKEN is not set")
if not OPENAI_API_KEY:
    raise RuntimeError("Environment variable OPENAI_API_KEY is not set")

TARIFFS = {
    "poniuhai": {"title": "–ü–æ–Ω—é—Ö–∞–π", "limit": 50, "price": 0},
    "basic":    {"title": "–ü—Ä–æ—Å—Ç–æ —Ö–∞–º",    "limit": 100, "price": 99},
    "simple":   {"title": "–ë—É–¥—É –ø—Ä–æ—â–µ",    "limit": 100, "price": 299},
    "etiquette": {"title": "–ß—Ö–∞–ª –Ω–∞ —ç—Ç–∏–∫–µ—Ç","limit": 300, "price": 499},
    "truth":    {"title": "–ë–µ—Å—Ü–µ–Ω–Ω–∞—è –ø—Ä–∞–≤–¥–∞","limit": 600, "price": 699},
    "ebamurena": {"title": "–ï–±–∞–º—É—Ä–µ–Ω–∞",     "limit": 2000,"price": 1099},
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_data: dict[int, dict] = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

# ‚Äî‚Äî‚Äî OpenAI-–æ—Ç–≤–µ—Ç ‚Äî‚Äî‚Äî
async def ask_openai(prompt: str) -> str:
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=120,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error("Error in OpenAI request: %s", e)
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò: {e}"

# ‚Äî‚Äî‚Äî /start ‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    kb = [
        [
            InlineKeyboardButton("üëä –Ø –ø–∞—Ü–∞–Ω", callback_data="gender_male"),
            InlineKeyboardButton("üíÖ –Ø –±–∞–±–∞",   callback_data="gender_female"),
        ]
    ]
    await update.message.reply_text(
        "–ï–º–∞–∞–∞! –î–∞—Ä–æ–≤–∞, —â–∞ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –∫—Ç–æ —Ç—ã.\n–¢—ã –≤–æ–æ–±—â–µ –∫—Ç–æ –ø–æ –∂–∏–∑–Ω–∏?",
        reply_markup=InlineKeyboardMarkup(kb),
    )

# ‚Äî‚Äî‚Äî –ø–æ–ª ‚Äî‚Äî‚Äî
async def gender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    gender = update.callback_query.data.split("_")[1]
    user_id = update.effective_user.id
    user_data[user_id] = {"gender": gender, "tariff": "poniuhai", "used": 0}
    await update.callback_query.edit_message_text(
        "–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ —Å–æ–≥–ª–∞—Å–µ–Ω, —á—Ç–æ —Ç–µ–±—è —Ç—É—Ç –±—É–¥—É—Ç –ø–æ–¥—Å—Ç—ë–±—ã–≤–∞—Ç—å, —Å—Ç–µ–±–∞—Ç—å –∏ –¥–∞–∂–µ —Å–ª–∞—Ç—å? üòÇ",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"),
                InlineKeyboardButton("‚ùå –Ø —Å–ª–∞–±–∞–∫", callback_data="consent_no"),
            ]
        ]),
    )

# ‚Äî‚Äî‚Äî —Å–æ–≥–ª–∞—Å–∏–µ ‚Äî‚Äî‚Äî
async def consent_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    user_id = update.effective_user.id
    if update.callback_query.data == "consent_no":
        await update.callback_query.edit_message_text(
            "–ù—É –∏ –∫–∞—Ç–∏—Å—å, /start –µ—Å–ª–∏ –Ω–∞–¥—É–º–∞–µ—à—å."
        )
        return

    await update.callback_query.edit_message_text(
        "–†–µ—Å–ø–µ–∫—Ç, —Ç—ã –≤ –¥–µ–ª–µ. –ù–∏–∂–µ ‚Äî —Ç–∞—Ä–∏—Ñ—ã —Ö*–∏—Ñ—ã:",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã —Ö*–∏—Ñ—ã", callback_data="tariffs")],
             [InlineKeyboardButton("‚ùì –ó–∞ —á—Ç–æ –ø–ª–∞—á—É?", callback_data="why_pay")]]
        ),
    )

# ‚Äî‚Äî‚Äî —Ç–∞—Ä–∏—Ñ—ã ‚Äî‚Äî‚Äî
async def show_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    text = "*–¢–∞—Ä–∏—Ñ—ã —Ö*–∏—Ñ—ã:*
"
    for key, t in TARIFFS.items():
        text += f"üî∏ *{t['title']}* ‚Äî {t['price']}‚ÇΩ ({t['limit']} —Å–º—Å)\n"
    kb = [
        [InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å {t['title']}", callback_data=f"buy_{key}")]
        for key, t in TARIFFS.items() if t['price'] > 0
    ]
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )

# ‚Äî‚Äî‚Äî –ø–æ–∫—É–ø–∫–∞ ‚Äî‚Äî‚Äî
async def buy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    tariff = update.callback_query.data.split("_")[1]
    title = TARIFFS.get(tariff, {}).get('title', tariff)
    user_id = update.effective_user.id
    if user_id in user_data:
        user_data[user_id]['tariff'] = tariff
    await update.callback_query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: *{title}*. –ü–æ–∫–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞–≥–ª—É—à–∫–∞.\n–°–∫–æ—Ä–æ –ø—Ä–∏–∫—Ä—É—Ç–∏–º ‚Äî –Ω–µ –Ω–æ–π.",
        parse_mode="Markdown",
    )

# ‚Äî‚Äî‚Äî –ø–æ—á–µ–º—É –ø–ª–∞—Ç–∏–º ‚Äî‚Äî‚Äî
async def why_pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    text = (
        "–¢—ã –ø–ª–∞—Ç–∏—à—å –∑–∞:\n"
        "‚Äî –ú–æ—â—å ChatGPT –±–µ–∑ VPN\n"
        "‚Äî –û–∑–≤—É—á–∫—É –∏ —Å—Ç–∏–ª—å\n"
        "‚Äî –û—Ç–≤–µ—Ç—ã –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ, —Ñ–æ—Ç–∫–µ, –≥–æ–ª–æ—Å–æ–º\n"
        "‚Äî –ù—É –∏ –∑–∞ –∫–∞–π—Ñ, –∞–≥–∞."
    )
    await update.callback_query.edit_message_text(text)

# ‚Äî‚Äî‚Äî —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî‚Äî‚Äî
async def handle_msg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    msg = update.message.text

    if user_id not in user_data:
        await update.message.reply_text("–ñ–º–∏ /start —Å–Ω–∞—á–∞–ª–∞.")
        return

    u = user_data[user_id]
    u['used'] += 1
    limit = TARIFFS[u['tariff']]['limit']
    if u['used'] > limit:
        tpl = get_reply_from_templates(msg)
        await update.message.reply_text(tpl)
        return

    reply = await ask_openai(msg)
    await update.message.reply_text(reply)

# ‚Äî‚Äî‚Äî –∑–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî
def main() -> None:
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(gender_callback, pattern="^gender_"))
    app.add_handler(CallbackQueryHandler(consent_callback, pattern="^consent_"))
    app.add_handler(CallbackQueryHandler(show_tariffs, pattern="^tariffs$"))
    app.add_handler(CallbackQueryHandler(buy_callback, pattern="^buy_"))
    app.add_handler(CallbackQueryHandler(why_pay, pattern="^why_pay$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_msg))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
    app.run_polling()

if __name__ == "__main__":
    main()
